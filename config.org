#+TITLE: Doom Emacs Configuration
#+AUTHOR: Randy Ridenour

* Basic Configuration

** Personal information

#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Randy Ridenour"
      user-mail-address "rlridenour@gmail.com")
#+end_src



** Modify the defaults

#+begin_src emacs-lisp :tangle yes
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t)           ; When there are lots of glyphs, keep them in memory

(delete-selection-mode 1)                         ; Replace selection when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(display-battery-mode 1)                          ; On laptops it's nice to know how much power you have
#+END_SRC

** Windows
This asks which buffer to go to when splitting a window. First, go to the window.
#+begin_src emacs-lisp :tangle yes
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+END_SRC

Then, pull up ~ivy~

#+begin_src emacs-lisp :tangle yes
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+END_SRC

Preview the buffer.

#+begin_src emacs-lisp :tangle yes
(setq +ivy-buffer-preview t)
#+END_SRC

** Buffer defaults

Set new buffers to org-mode

#+begin_src emacs-lisp :tangle yes
(setq-default major-mode 'org-mode)
#+END_SRC

* Appearance

** Fonts

(setq doom-font (font-spec :family "JetBrains Mono" :size 24)
      doom-big-font (font-spec :family "JetBrains Mono" :size 36)
      doom-variable-pitch-font (font-spec :family "Overpass" :size 24)
      doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light))


** Theme

The Doom themes are nice, but I'm a fan of Zenburn.

#+begin_src emacs-lisp :tangle yes
(setq doom-theme 'hc-zenburn)
#+end_src

Change default buffer names

#+begin_src emacs-lisp :tangle yes
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src

There's a bug with the modeline in insert mode for org documents ([[https://github.com/seagle0128/doom-modeline/issues/300][issue]]), so
#+begin_src emacs-lisp :tangle yes
(custom-set-faces! '(doom-modeline-evil-insert-state :weight bold :foreground "#339CDB"))
#+END_SRC

** Line numbers

#+begin_src emacs-lisp :tangle yes
(setq display-line-numbers-type t)
#+end_src

* Spelling, snippets, etc.

** Input method

Set the default input method to TeX.

#+begin_src emacs-lisp :tangle yes
(setq default-input-method 'TeX)
#+end_src

** Spelling

Use aspell.
#+begin_src emacs-lisp :tangle yes
(setq ispell-program-name "/usr/local/bin/aspell")
	;; Please note ispell-extra-args contains ACTUAL parameters passed to aspell
	(setq ispell-extra-args '("--sug-mode=ultra"))
#+end_src

Store the personal dictionary in Dropbox for sharing between different machines. Save changes to the personal dictionary without asking.

#+begin_src emacs-lisp :tangle yes
(setq ispell-personal-dictionary "/Users/rlridenour/Dropbox/emacs/spelling/.aspell.en.pws")
(setq ispell-silently-savep t)
#+end_src

Keep flyspell from slowing down the machine.

#+begin_src emacs-lisp :tangle yes
(flyspell-lazy-mode 1)
#+end_src


** Abbreviations

Use common abbreviation list.

#+begin_src emacs-lisp :tangle yes
(load "~/Dropbox/emacs/my-emacs-abbrev")
#+end_src

** Company mode

#+begin_src emacs-lisp :tangle yes
(after! company
  (setq company-idle-delay 1
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
(add-hook 'evil-normal-state-entry-hook #'company-abort))
#+end_src

* Org mode


Enable ignoring a headline during export.

#+begin_src emacs-lisp :tangle yes
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_src

Enable word count.

#+begin_src emacs-lisp :tangle yes
(add-hook 'org-mode-hook 'wc-mode)
#+end_src

Have spelling ignore TeX commands

#+begin_src emacs-lisp :tangle yes
 (defun flyspell-ignore-tex ()
	(interactive)
	(set (make-variable-buffer-local 'ispell-parser) 'tex))
(add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
(add-hook 'org-mode-hook 'flyspell-ignore-tex)
#+end_src

Use C-c c to capture to tasks and journal.

#+begin_src emacs-lisp :tangle yes
(setq org-capture-templates
	'(("t" "Todo" entry (file+headline "~/Dropbox/org/tasks.org" "Tasks")
	   "* TODO %?\n  %i\n  %a")
	  ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
	   "* %?\nEntered on %U\n  %i\n  %a")))
(define-key global-map "\C-cc" 'org-capture)
#+end_src

Use org-ref for citations.

#+begin_src emacs-lisp :tangle yes

	(setq org-ref-completion-library 'org-ref-ivy-cite
		  org-ref-default-bibliography '("~/Dropbox/bibtex/randybib.bib"))
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package org-ref
	:after org
	:config
	(setq org-ref-completion-library 'org-ref-ivy-cite
		  org-ref-default-bibliography '("~/Dropbox/bibtex/randybib.bib"))
	)
#+end_src

Deft for quick notes.

#+begin_src emacs-lisp :tangle yes
(use-package deft
:bind ("<f9>" . deft)
:commands (deft)
  :config (setq deft-directory "~/Dropbox/org/notes")
          (setq deft-extensions '("org"))
          (setq deft-default-extension "org")
          (setq deft-org-mode-title-prefix t)
          (setq deft-use-filter-string-for-filename t)
          (setq deft-file-naming-rules
                '((noslash . "-")
                  (nospace . "-")
                  (case-fn . downcase)))
          (setq deft-text-mode 'org-mode))
#+end_src

* LaTeX


Set reftex bibliography

#+begin_src emacs-lisp :tangle yes
(setq reftex-default-bibliography "~/Dropbox/bibtex/randybib.bib")
(setq ivy-re-builders-alist
      '((ivy-bibtex . ivy--regex-ignore-order)
        (t . ivy--regex-plus)))
#+end_src

Use latexmk for org export to PDF

#+begin_src emacs-lisp :tangle yes
(setq org-latex-pdf-process (list "latexmk -shell-escape -f -pdf -quiet -interaction=nonstopmode %f"))
#+end_src


Allow Auctex to use Biber instead of Bibtex.

#+begin_src emacs-lisp :tangle yes
(defun TeX-run-Biber (name command file)
	"Create a process for NAME using COMMAND to format FILE with Biber."
	(let ((process (TeX-run-command name command file)))
	  (setq TeX-sentinel-function 'TeX-Biber-sentinel)
	  (if TeX-process-asynchronous
		  process
		(TeX-synchronous-sentinel name file process))))

  (defun TeX-Biber-sentinel (process name)
	"Cleanup TeX output buffer after running Biber."
	(goto-char (point-max))
	(cond
	 ;; Check whether Biber reports any warnings or errors.
	 ((re-search-backward (concat
						   "^(There \\(?:was\\|were\\) \\([0-9]+\\) "
						   "\\(warnings?\\|error messages?\\))") nil t)
	  ;; Tell the user their number so that she sees whether the
	  ;; situation is getting better or worse.
	  (message (concat "Biber finished with %s %s. "
					   "Type `%s' to display output.")
			   (match-string 1) (match-string 2)
			   (substitute-command-keys
				"\\\\[TeX-recenter-output-buffer]")))
	 (t
	  (message (concat "Biber finished successfully. "
					   "Run LaTeX again to get citations right."))))
	(setq TeX-command-next TeX-command-default))

  (eval-after-load "tex"
	'(add-to-list 'TeX-command-list '("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber"))
	)
#+end_src

Bibtex completion formats.

#+begin_src emacs-lisp :tangle yes
  (defun bibtex-completion-format-citation-orgref (keys)
	"Formatter for org-ref citations."
	(let* ((prenote  (if bibtex-completion-cite-prompt-for-optional-arguments (read-from-minibuffer "Prenote: ") ""))
		   (postnote (if bibtex-completion-cite-prompt-for-optional-arguments (read-from-minibuffer "Postnote: ") "")))
	  (if (and (string= "" prenote) (string= "" postnote))
		  (format "[[%s]]" (s-join "; " (--map (concat "autocite:" it) keys)))
		(format "[[%s][%s::%s]]"  (s-join "; " (--map (concat "autocite:" it) keys)) prenote postnote))))

#+end_src

Ivy-bibtex settings.

#+begin_src emacs-lisp :tangle yes
(use-package ivy-bibtex
	;; :bind ("s-4" . ivy-bibtex)
	:after (ivy)
	:config
	(setq bibtex-completion-bibliography '("~/Dropbox/bibtex/randybib.bib"))
	(setq reftex-default-bibliography '("~/Dropbox/bibtex/randybib.bib"))
	(setq bibtex-completion-pdf-field "File")
	(setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)
	(setq bibtex-completion-format-citation-functions
		  '((org-mode      . bibtex-completion-format-citation-orgref)
			(latex-mode    . bibtex-completion-format-citation-cite)
			;; (markdown-mode    . bibtex-completion-format-citation-cite)
			(markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
			(default       . bibtex-completion-format-citation-default))))
#+end_src



TeX clean functions from the shell.

#+begin_src emacs-lisp :tangle yes
  (defun tex-clean ()
	(interactive)
	(shell-command "latexmk -c"))


  (defun tex-clean-all ()
	(interactive)
	(shell-command "latexmk -C"))

#+end_src
