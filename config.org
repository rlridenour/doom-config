#+TITLE: Doom Emacs Configuration
#+AUTHOR: Randy Ridenour

* Personal information

#+begin_src emacs-lisp :tangle yes

;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

(setq user-full-name "Randy Ridenour"
      user-mail-address "rlridenour@gmail.com")

#+end_src

* Doom Tweaks

** Appearance

Set font to IBM Plex Mono. The variable pitch font is IBM Plex Sans, but I'm not using mixed-pitch anywhere.

#+begin_src emacs-lisp :tangle yes


;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "IBM Plex Mono" :size 15)
      doom-big-font (font-spec :family "IBM Plex Mono" :size 22)
      doom-variable-pitch-font (font-spec :family "IBM Plex Sans" :size 15))


#+end_src

I have looked at all the Doom themes, but I'm still a fan of Zenburn.

#+begin_src emacs-lisp :tangle yes


;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)
;; (setq doom-theme 'zenburn)

#+end_src

** Line numbers

#+begin_src emacs-lisp :tangle yes


;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

#+end_src

** Miscellaneous defaults

#+begin_src emacs-lisp :tangle yes
(setq-default
 delete-by-moving-to-trash t                      ; Delete files to trash
 ;; tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward)              ; Uniquify buffer names

(setq evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t)                         ; Nobody likes to loose work, I certainly don't

(delete-selection-mode 1)                         ; Replace selection when inserting text
(whitespace-mode nil)
(display-time-mode 1)                             ; Enable time in the mode-line
(display-battery-mode 1)                          ; On laptops it's nice to know how much power you have
(show-smartparens-global-mode t)
(global-visual-line-mode t)

#+end_src

#+begin_src emacs-lisp :tangle yes
(advice-add #'doom-highlight-non-default-indentation-h :override #'ignore)
#+end_src

** Windows

#+begin_src emacs-lisp :tangle yes
;; This asks which buffer to go to when splitting a window. First, go to the window.
(setq evil-vsplit-window-right t
      evil-split-window-below t)

;; Then, pull up ivy

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))

;; Preview the buffer.

(setq +ivy-buffer-preview t)
#+end_src

** PDF Tools

#+begin_src emacs-lisp :tangle yes
(use-package! pdf-tools
  :defer
  :config
  (pdf-tools-install))
#+end_src

** Dired

Hide various file types, mostly LaTeX auxiliary files, in Dired.

#+begin_src emacs-lisp :tangle yes
  (require 'dired-x)
  (setq-default dired-omit-files-p t) ; this is buffer-local variable
  (setq dired-omit-files
		(concat dired-omit-files "\\|^\\..+$"))
  (setq-default dired-omit-extensions '("fdb_latexmk" "aux" "bbl" "blg" "fls" "glo" "idx" "ilg" "ind" "ist" "log" "out" "gz" "bcf" "run.xml"  "DS_Store"))
  (setq dired-dwim-target t)
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! deadgrep
  :defer)
#+end_src

* Basic editing

Set scratch buffer to org-mode.

#+begin_src emacs-lisp :tangle yes
(setq initial-major-mode 'org-mode)
#+end_src

Hungry delete deletes consecutive whitespace.

#+begin_src emacs-lisp :tangle yes
  (use-package hungry-delete
    :defer
	:config
	(global-hungry-delete-mode))
#+end_src

Set  input method to TeX. This is especially useful for entering em and en-dashes.

#+begin_src emacs-lisp :tangle yes
(setq default-input-method 'TeX)
(add-hook 'text-mode-hook 'toggle-input-method)
(add-hook 'markdown-mode-hook 'toggle-input-method)
(add-hook 'org-mode-hook 'toggle-input-method)
#+end_src

 Add my custom snippets to Yasnippet

#+begin_src emacs-lisp :tangle yes
(after! yasnippet
  (setq yas-snippet-dirs (append yas-snippet-dirs
        '("~/.doom.d/snippets"))))
#+end_src

Use ebib for bibtex file management

#+begin_src emacs-lisp :tangle yes
(use-package! ebib
:defer
(ebib-preload-bib-files '("bibtexfile1.bib" "bibtexfile2.bib"))
:config
(setq ebib-bibtex-dialect 'biblatex)
:custom
(ebib-preload-bib-files '("~/bibtex/rlr-bib/rlr.bib")))

#+end_src

#+begin_src emacs-lisp :tangle yes
  (defun insert-date-string ()
	"Insert current date yyyymmdd."
	(interactive)
	(insert (format-time-string "%Y%m%d")))

  (defun insert-standard-date ()
	"Inserts standard date time string."
	(interactive)
	(insert (format-time-string "%B %e, %Y")))
  (global-set-key (kbd "<f8>") 'insert-standard-date)
  (global-set-key (kbd "C-c d") 'insert-date-string)
#+end_src

** Spelling

#+begin_src emacs-lisp :tangle yes

(setq ispell-program-name "/usr/local/bin/aspell")
(setq ispell-personal-dictionary "/Users/rlridenour/Dropbox/emacs/spelling/.aspell.en.pws")
(setq ispell-silently-savep t)

#+end_src

** Bookmarks

#+begin_src emacs-lisp :tangle yes


(load "~/Dropbox/emacs/my-emacs-abbrev")

#+end_src

The Shrink Whitespace package reduces all whitespace surrounding the point to one empty line or space when called once. When called again, it also eliminates that bit of whiespace.

#+begin_src emacs-lisp :tangle yes
  (use-package! shrink-whitespace
    :defer
	:bind ("C-c w" . shrink-whitespace))
#+end_src

Kill contents of scratch buffer, not the buffer itself. From [[http://emacswiki.org/emacs/RecreateScratchBuffer][TN]].

#+begin_src emacs-lisp :tangle yes
  (defun unkillable-scratch-buffer ()
	(if (equal (buffer-name (current-buffer)) "*scratch*")
		(progn
		  (delete-region (point-min) (point-max))
		  nil)
	  t))
  (add-hook 'kill-buffer-query-functions 'unkillable-scratch-buffer)
#+end_src

** Saved Keyboard Macros

Splits Org-mode list items

#+begin_src emacs-lisp :tangle yes
(fset 'split-org-item
   [?\C-k ?\M-\\ return ?\C-y])
#+end_src


#+begin_src emacs-lisp :tangle yes
(fset 'convert-markdown-to-org
   [?\M-< ?\M-% ?* return ?- return ?! ?\M-< ?\C-\M-% ?# ?* backspace backspace ?  ?# ?* ?$ return return ?! ?\M-< ?\M-% ?# return ?* return ?!])
#+end_src

* Languages

** Org Mode


#+begin_src emacs-lisp :tangle yes
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org/")
#+end_src

Don't use the Doom Org-mode template.

#+begin_src emacs-lisp :tangle yes
(set-file-template! "\\.org$" :ignore t)
#+end_src


#+begin_src emacs-lisp :tangle yes

;; (add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode)

;; Enable ignoring a headline during export.
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))


(add-hook 'org-mode-hook 'wc-mode)


 (defun flyspell-ignore-tex ()
	(interactive)
	(set (make-variable-buffer-local 'ispell-parser) 'tex))
(add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
(add-hook 'org-mode-hook 'flyspell-ignore-tex)



(use-package org-ref
	:after org
	:init
	(setq org-ref-completion-library 'org-ref-ivy-cite
		  org-ref-default-bibliography '("~/bibtex/rlr-bib/rlr.bib")))
#+end_src

Return adds new heading or list item. From [[https://github.com/aaronjensen/emacs-orgonomic][Aaron Jensen]]


#+begin_src emacs-lisp :tangle yes
(use-package! orgonomic
  :defer t
  :hook (org-mode . orgonomic-mode))
#+end_src


*** Org Roam

#+begin_src emacs-lisp :tangle yes
(setq org-roam-directory "~/Dropbox/org")
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package! org-journal
  :after org
      :bind
      ("C-c n j" . org-journal-new-entry)
      :custom
      (org-journal-dir "~/Dropbox/org")
      (org-journal-date-prefix "#+TITLE: ")
      (org-journal-file-format "%Y-%m-%d.org")
      (org-journal-date-format "%A, %d %B %Y"))
    (setq org-journal-enable-agenda-integration t)
#+end_src


#+begin_src emacs-lisp :tangle yes
(use-package! deft
      :after org
      :bind
      ("C-c n d" . deft)
      :custom
      (deft-recursive t)
      (deft-use-filter-string-for-filename t)
      (deft-default-extension "org")
      (deft-directory "~/Dropbox/org"))
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-roam-capture-templates
  '(("d" "default" plain (function org-roam-capture--get-point)
     "%?"
     :file-name "%<%Y%m%d%H%M%S>-${slug}"
     :head "#+title: ${title}\n#+ROAM_TAGS: \n"
     :unnarrowed t)))
#+end_src

Org-roam bibtex

#+begin_src emacs-lisp :tangle yes
(use-package! org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :bind (:map org-mode-map
         (("C-c n a" . orb-note-actions))))

#+end_src

** LaTeX

#+begin_src emacs-lisp :tangle yes

;; (add-hook 'LaTeX-mode-hook #'mixed-pitch-mode)

(setq reftex-default-bibliography "~/bibtex/rlr-bib/rlr.bib")
(setq org-latex-pdf-process (list "latexmk -shell-escape -f -pdf -quiet -interaction=nonstopmode %f"))
(setq ivy-re-builders-alist
      '((ivy-bibtex . ivy--regex-ignore-order)
        (t . ivy--regex-plus)))

;; (setq bibtex-completion-bibliography
;;       '("~/bibtex/rlr-bib/rlr.bib"))



;; Configure AucTeX
;; Configure Biber
;; Allow AucTeX to use biber as well as/instead of bibtex.

  ;; Biber under AUCTeX
  (defun TeX-run-Biber (name command file)
	"Create a process for NAME using COMMAND to format FILE with Biber."
	(let ((process (TeX-run-command name command file)))
	  (setq TeX-sentinel-function 'TeX-Biber-sentinel)
	  (if TeX-process-asynchronous
		  process
		(TeX-synchronous-sentinel name file process))))

  (defun TeX-Biber-sentinel (process name)
	"Cleanup TeX output buffer after running Biber."
	(goto-char (point-max))
	(cond
	 ;; Check whether Biber reports any warnings or errors.
	 ((re-search-backward (concat
						   "^(There \\(?:was\\|were\\) \\([0-9]+\\) "
						   "\\(warnings?\\|error messages?\\))") nil t)
	  ;; Tell the user their number so that she sees whether the
	  ;; situation is getting better or worse.
	  (message (concat "Biber finished with %s %s. "
					   "Type `%s' to display output.")
			   (match-string 1) (match-string 2)
			   (substitute-command-keys
				"\\\\[TeX-recenter-output-buffer]")))
	 (t
	  (message (concat "Biber finished successfully. "
					   "Run LaTeX again to get citations right."))))
	(setq TeX-command-next TeX-command-default))

  (eval-after-load "tex"
	'(add-to-list 'TeX-command-list '("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber"))
	)

  (defun tex-clean ()
	(interactive)
	(shell-command "latexmk -c"))


  (defun tex-clean-all ()
	(interactive)
	(shell-command "latexmk -C"))
#+end_src

Modify Bibtex completion in Org mode.

#+begin_src emacs-lisp :tangle yes
(setq bibtex-completion-cite-default-command "autocite")
(defun bibtex-completion-format-citation-orgref (keys)
  "Formatter for Org mode citation commands.
Prompts for the command and for arguments if the commands can
take any.  If point is inside or just after a citation command,
only adds KEYS to it."
  (let (macro)
    (cond
     ((and (require 'reftex-parse nil t)
           (setq macro (reftex-what-macro 1))
           (stringp (car macro))
           (string-match "\\`\\\\cite\\|cite\\'" (car macro)))
      ;; We are inside a cite macro.  Insert key at point, with appropriate delimiters.
      (delete-horizontal-space)
      (concat (pcase (preceding-char)
                (?\{ "")
                (?, " ")
                (_ ", "))
              (s-join ", " keys)
              (if (member (following-char) '(?\} ?,))
		     ""
                ", ")))
     ((and (equal (preceding-char) ?\})
           (require 'reftex-parse nil t)
           (save-excursion
             (forward-char -1)
             (setq macro (reftex-what-macro 1)))
           (stringp (car macro))
           (string-match "\\`\\\\cite\\|cite\\'" (car macro)))
      ;; We are right after a cite macro.  Append key and leave point at the end.
      (delete-char -1)
      (delete-horizontal-space t)
      (concat (pcase (preceding-char)
                (?\{ "")
                (?, " ")
                (_ ", "))
              (s-join ", " keys)
              "}"))
     (t
      ;; We are not inside or right after a cite macro.  Insert a full citation.
      (let* ((initial (when bibtex-completion-cite-default-as-initial-input
                        bibtex-completion-cite-default-command))
             (default (unless bibtex-completion-cite-default-as-initial-input
                        bibtex-completion-cite-default-command))
             (default-info (if default (format " (default \"%s\")" default) ""))
             (cite-command (completing-read
                            (format "Cite command%s: " default-info)
                            bibtex-completion-cite-commands nil nil initial
                            'bibtex-completion-cite-command-history default nil)))
        (if (member cite-command '("nocite" "supercite"))  ; These don't want arguments.
            (format "\\%s{%s}" cite-command (s-join ", " keys))
          (let ((prenote (if bibtex-completion-cite-prompt-for-optional-arguments
                             (read-from-minibuffer "Prenote: ")
                           ""))
                (postnote (if bibtex-completion-cite-prompt-for-optional-arguments
                              (read-from-minibuffer "Postnote: ")
                            "")))
                        (cond ((and (string= "" prenote) (string= "" postnote))
                   (format "[[%s:%s]]" cite-command (s-join ", " keys)))
                  (t
                   (format "[[%s:%s][%s::%s]]" cite-command (s-join ", " keys) prenote postnote)
                   )))))))))
#+end_src

Use Ivy-bibtex for reference completions.

#+begin_src emacs-lisp :tangle yes
(use-package ivy-bibtex
	;; :bind ("s-4" . ivy-bibtex)
	:after (ivy)
	:config
	(setq bibtex-completion-bibliography '("~/bibtex/rlr-bib/rlr.bib"))
	(setq reftex-default-bibliography '("~/bibtex/rlr-bib/rlr.bib"))
	(setq bibtex-completion-pdf-field "File")
	(setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)
	(setq bibtex-completion-format-citation-functions
		  '((org-mode      . bibtex-completion-format-citation-orgref)
			(latex-mode    . bibtex-completion-format-citation-cite)
			;; (markdown-mode    . bibtex-completion-format-citation-cite)
			(markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
			(default       . bibtex-completion-format-citation-default))))

#+end_src

#+begin_src emacs-lisp :tangle yes
  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (setq TeX-view-program-list
		'(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
#+end_src


** Markdown

#+begin_src emacs-lisp :tangle yes
;; (add-hook! #'mixed-pitch-mode)
#+end_src

* Keybindings

#+begin_src emacs-lisp :tangle yes
  (global-unset-key (kbd "s-m"))

  (use-package major-mode-hydra
    :defer
	:bind
	("s-m" . major-mode-hydra))
#+end_src

Major-mode Hydras

#+begin_src emacs-lisp :tangle yes
  (major-mode-hydra-bind markdown-mode "Format"
	("h" markdown-insert-header-dwim "header")
	("l" markdown-insert-link "link")
	("u" markdown-insert-uri "url")
	("f" markdown-insert-footnote "footnote")
	("w" markdown-insert-wiki-link "wiki")
	("r" markdown-insert-reference-link-dwim "r-link")
	("n" markdown-cleanup-list-numbers "clean-lists")
	("c" markdown-complete-buffer "complete")

	("q" nil))

  (major-mode-hydra-bind latex-mode "Bibtex"
	("b" ivy-bibtex "Ivy-Bibtex"))

  (major-mode-hydra-bind latex-mode "LaTeXmk"
	("p" rlr/tex-pvc "pvc")
	("c" tex-clean "clean aux")
	("C" tex-clean-all "clean all")

	("q" nil))

(major-mode-hydra-bind org-mode "Export"
    ("l" org-latex-export-to-latex "Org to LaTeX")
    ("p" org-latex-export-to-pdf "Org to PDF")
    ("b" org-beamer-export-to-pdf "Org to Beamer-PDF")
    ("B" org-beamer-export-to-latex "Org to Beamer-LaTeX"))


  (major-mode-hydra-bind org-mode "Bibtex"
	("r" ivy-bibtex "Ivy-Bibtex"))

  (major-mode-hydra-bind org-mode "Clean"
	("c" tex-clean "clean aux")
	("C" tex-clean-all "clean all")

	("q" nil))
#+end_src

#+begin_src emacs-lisp :tangle yes
(map! :leader
(:desc "open" :prefix "o"
 :desc "Open in default app" :n "D" #'+macos/open-in-default-program)
)
#+end_src

#+begin_src emacs-lisp :tangle yes
(map! :leader
(:desc "search" :prefix "s"
 :desc "Deadgrep" :n "g" #'deadgrep)
)
#+end_src
Key-chords

#+begin_src emacs-lisp :tangle yes


  (use-package key-chord
  :init
  (key-chord-mode 1)
:config
	(key-chord-define evil-normal-state-map "kj" 'doom/escape)
	(key-chord-define evil-normal-state-map "jk" 'doom/escape)
  (key-chord-define evil-insert-state-map "kj" 'evil-normal-state)
  (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

#+begin_src emacs-lisp :tangle yes
(bind-keys
   ("<s-backspace>" . kill-whole-line))
#+end_src


* Final Steps


#+begin_src emacs-lisp :tangle yes
  (setq default-directory "~/")
#+end_src
